import streamlit as st
import pandas as pd
import numpy as np
import openpyxl
import io
import tempfile
import os
import re
from fuzzywuzzy import fuzz
from utils import (
    load_excel_file, 
    save_excel_file, 
    map_columns_automatically, 
    transfer_data_between_tables,
    preview_data
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ú–∞–ø–ø–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤",
    page_icon="üìä",
    layout="wide"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–µ—Å—Å–∏–∏
if 'source_file' not in st.session_state:
    st.session_state.source_file = None
if 'target_file' not in st.session_state:
    st.session_state.target_file = None
if 'source_data' not in st.session_state:
    st.session_state.source_data = None
if 'target_data' not in st.session_state:
    st.session_state.target_data = None
if 'source_columns' not in st.session_state:
    st.session_state.source_columns = None
if 'target_columns' not in st.session_state:
    st.session_state.target_columns = None
if 'column_mapping' not in st.session_state:
    st.session_state.column_mapping = {}
if 'mapping_complete' not in st.session_state:
    st.session_state.mapping_complete = False
if 'transfer_complete' not in st.session_state:
    st.session_state.transfer_complete = False
if 'auto_mapped' not in st.session_state:
    st.session_state.auto_mapped = False
if 'source_sheet_name' not in st.session_state:
    st.session_state.source_sheet_name = None
if 'target_sheet_name' not in st.session_state:
    st.session_state.target_sheet_name = None
if 'source_sheets' not in st.session_state:
    st.session_state.source_sheets = []
if 'target_sheets' not in st.session_state:
    st.session_state.target_sheets = []
if 'source_workbook' not in st.session_state:
    st.session_state.source_workbook = None
if 'target_workbook' not in st.session_state:
    st.session_state.target_workbook = None
if 'preview_result' not in st.session_state:
    st.session_state.preview_result = None
if 'source_header_row' not in st.session_state:
    st.session_state.source_header_row = 1
if 'target_header_row' not in st.session_state:
    st.session_state.target_header_row = 1

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
st.title("üîÑ –ú–∞–ø–ø–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤")
st.markdown("""
### –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —à–∞–±–ª–æ–Ω–∞–º–∏ —Ç–∞–±–ª–∏—Ü –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤

–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç:
- –ó–∞–≥—Ä—É–∂–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã Excel –∏–∑ Ozon, Wildberries –∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
- –í—Ä—É—á–Ω—É—é –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
- –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
- –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
""")

st.divider()

# –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
col1, col2 = st.columns(2)

with col1:
    st.subheader("üì§ –ò—Å—Ö–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–û—Ç–∫—É–¥–∞)")
    source_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É (xlsx)", type=['xlsx'], key="source_uploader")
    
    if source_file is not None and source_file != st.session_state.source_file:
        st.session_state.source_file = source_file
        try:
            source_workbook, source_sheets = load_excel_file(source_file)
            st.session_state.source_workbook = source_workbook
            st.session_state.source_sheets = source_sheets
            
            if len(source_sheets) > 0:
                default_sheet = 0
                st.session_state.source_sheet_name = source_sheets[default_sheet]
            else:
                st.error("–í –∏—Å—Ö–æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤!")
                st.session_state.source_data = None
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}")
            st.session_state.source_data = None
    
    if st.session_state.source_workbook is not None and st.session_state.source_sheets:
        col1a, col1b = st.columns([3, 1])
        with col1a:
            selected_source_sheet = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç –≤ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ", 
                st.session_state.source_sheets,
                index=st.session_state.source_sheets.index(st.session_state.source_sheet_name) if st.session_state.source_sheet_name in st.session_state.source_sheets else 0
            )
        
        with col1b:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            source_header_row = st.number_input(
                "–°—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤",
                min_value=1,
                max_value=20,
                value=st.session_state.source_header_row,
                step=1,
                key="source_header_input"
            )
        
        if selected_source_sheet != st.session_state.source_sheet_name or source_header_row != st.session_state.source_header_row:
            st.session_state.source_sheet_name = selected_source_sheet
            st.session_state.source_header_row = source_header_row
            st.session_state.auto_mapped = False
            st.session_state.mapping_complete = False
            st.session_state.transfer_complete = False
        
        try:
            sheet = st.session_state.source_workbook[st.session_state.source_sheet_name]
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—Ç—Ä–æ–∫—É)
            header_row = st.session_state.source_header_row
            headers = []
            column_indices = []
            
            # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –∏—Ö –∏–Ω–¥–µ–∫—Å—ã
            for i, cell in enumerate(sheet[header_row]):
                if cell.value is not None and str(cell.value).strip() != "":
                    headers.append(str(cell.value))
                    column_indices.append(i)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
            unique_headers = {}
            for i, header in enumerate(headers):
                if header in unique_headers:
                    # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å
                    counter = 1
                    new_header = f"{header}_{counter}"
                    while new_header in unique_headers:
                        counter += 1
                        new_header = f"{header}_{counter}"
                    headers[i] = new_header
                unique_headers[headers[i]] = True
                
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            data = []
            for row in sheet.iter_rows(min_row=header_row + 1, values_only=True):
                if any(cell is not None for cell in row):
                    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                    row_data = [row[idx] for idx in column_indices]
                    data.append(row_data)
            
            # –°–æ–∑–¥–∞–µ–º DataFrame —Ç–æ–ª—å–∫–æ —Å –Ω–µ–ø—É—Å—Ç—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            df = pd.DataFrame(data, columns=headers)
            
            st.session_state.source_data = df
            st.session_state.source_columns = headers
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
            st.write("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:")
            st.dataframe(df.head(5))
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}")
            st.session_state.source_data = None

with col2:
    st.subheader("üì• –¶–µ–ª–µ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–ö—É–¥–∞)")
    target_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ç–∞–±–ª–∏—Ü—É (xlsx)", type=['xlsx'], key="target_uploader")
    
    if target_file is not None and target_file != st.session_state.target_file:
        st.session_state.target_file = target_file
        try:
            target_workbook, target_sheets = load_excel_file(target_file)
            st.session_state.target_workbook = target_workbook
            st.session_state.target_sheets = target_sheets
            
            if len(target_sheets) > 0:
                default_sheet = 0
                st.session_state.target_sheet_name = target_sheets[default_sheet]
            else:
                st.error("–í —Ü–µ–ª–µ–≤–æ–º —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤!")
                st.session_state.target_data = None
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}")
            st.session_state.target_data = None
    
    if st.session_state.target_workbook is not None and st.session_state.target_sheets:
        col2a, col2b = st.columns([3, 1])
        with col2a:
            selected_target_sheet = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç –≤ —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ", 
                st.session_state.target_sheets,
                index=st.session_state.target_sheets.index(st.session_state.target_sheet_name) if st.session_state.target_sheet_name in st.session_state.target_sheets else 0
            )
        
        with col2b:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            target_header_row = st.number_input(
                "–°—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤",
                min_value=1,
                max_value=20,
                value=st.session_state.target_header_row,
                step=1,
                key="target_header_input"
            )
        
        if selected_target_sheet != st.session_state.target_sheet_name or target_header_row != st.session_state.target_header_row:
            st.session_state.target_sheet_name = selected_target_sheet
            st.session_state.target_header_row = target_header_row
            st.session_state.auto_mapped = False
            st.session_state.mapping_complete = False
            st.session_state.transfer_complete = False
        
        try:
            sheet = st.session_state.target_workbook[st.session_state.target_sheet_name]
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—Ç—Ä–æ–∫—É)
            header_row = st.session_state.target_header_row
            headers = []
            column_indices = []
            
            # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –∏—Ö –∏–Ω–¥–µ–∫—Å—ã
            for i, cell in enumerate(sheet[header_row]):
                if cell.value is not None and str(cell.value).strip() != "":
                    headers.append(str(cell.value))
                    column_indices.append(i)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
            unique_headers = {}
            for i, header in enumerate(headers):
                if header in unique_headers:
                    # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å
                    counter = 1
                    new_header = f"{header}_{counter}"
                    while new_header in unique_headers:
                        counter += 1
                        new_header = f"{header}_{counter}"
                    headers[i] = new_header
                unique_headers[headers[i]] = True
                
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            data = []
            for row in sheet.iter_rows(min_row=header_row + 1, values_only=True):
                if any(cell is not None for cell in row):
                    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                    row_data = [row[idx] for idx in column_indices]
                    data.append(row_data)
            
            # –°–æ–∑–¥–∞–µ–º DataFrame —Ç–æ–ª—å–∫–æ —Å –Ω–µ–ø—É—Å—Ç—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            df = pd.DataFrame(data, columns=headers)
            
            st.session_state.target_data = df
            st.session_state.target_columns = headers
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
            st.write("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã:")
            st.dataframe(df.head(5))
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}")
            st.session_state.target_data = None

st.divider()

# –†–∞–∑–¥–µ–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏ —Ä—É—á–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞
if st.session_state.source_data is not None and st.session_state.target_data is not None:
    st.header("üîÑ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫")
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞
    if not st.session_state.auto_mapped:
        if st.button("üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫"):
            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫..."):
                st.session_state.column_mapping = map_columns_automatically(
                    st.session_state.source_columns,
                    st.session_state.target_columns
                )
                st.session_state.auto_mapped = True
                st.rerun()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞
    if st.session_state.auto_mapped:
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫ —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
        all_target_columns = ["–ù–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å"] + list(st.session_state.target_columns)
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∏ –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ
        auto_mapped_columns = []
        unmapped_columns = []
        
        for src_col in st.session_state.source_columns:
            if src_col in st.session_state.column_mapping:
                auto_mapped_columns.append(src_col)
            else:
                unmapped_columns.append(src_col)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        with st.form(key="mapping_form"):
            st.markdown("### ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:")
            st.caption("–°–ª–µ–≤–∞ - –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å–ø—Ä–∞–≤–∞ - –≤—ã–±–æ—Ä —Ü–µ–ª–µ–≤—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.")
            
            # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            for src_col in auto_mapped_columns:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞
                current_mapping = st.session_state.column_mapping.get(src_col, None)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
                selected_idx = 0
                if current_mapping is not None:
                    try:
                        selected_idx = all_target_columns.index(current_mapping)
                    except ValueError:
                        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫
                        all_target_columns.append(current_mapping)
                        selected_idx = len(all_target_columns) - 1
                
                # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
                cols = st.columns([3, 3])
                with cols[0]:
                    st.markdown(f"**{src_col}**", help="–ò—Å—Ö–æ–¥–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞")
                with cols[1]:
                    mapping = st.selectbox(
                        "–¶–µ–ª–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞", 
                        options=all_target_columns,
                        index=selected_idx,
                        key=f"auto_map_{src_col}",
                        label_visibility="collapsed"
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥
                    if mapping != "–ù–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å":
                        st.session_state.column_mapping[src_col] = mapping
                    elif src_col in st.session_state.column_mapping:
                        del st.session_state.column_mapping[src_col]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
            st.divider()
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            if unmapped_columns:
                st.markdown("### ‚ùå –ù–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:")
                st.caption("–î–ª—è —ç—Ç–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª–µ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞.")
                
                # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ –¥–ª—è –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                for src_col in unmapped_columns:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å None)
                    current_mapping = st.session_state.column_mapping.get(src_col, None)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
                    selected_idx = 0
                    if current_mapping is not None:
                        try:
                            selected_idx = all_target_columns.index(current_mapping)
                        except ValueError:
                            all_target_columns.append(current_mapping)
                            selected_idx = len(all_target_columns) - 1
                    
                    # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
                    cols = st.columns([3, 3])
                    with cols[0]:
                        st.markdown(f"**{src_col}**", help="–ò—Å—Ö–æ–¥–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞")
                    with cols[1]:
                        mapping = st.selectbox(
                            "–¶–µ–ª–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞",
                            options=all_target_columns,
                            index=selected_idx,
                            key=f"unmap_{src_col}",
                            label_visibility="collapsed"
                        )
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥
                        if mapping != "–ù–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å":
                            st.session_state.column_mapping[src_col] = mapping
                        elif src_col in st.session_state.column_mapping:
                            del st.session_state.column_mapping[src_col]
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é
            total_src = len(st.session_state.source_columns)
            total_mapped = len(st.session_state.column_mapping)
            st.info(f"–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {total_mapped} –∏–∑ {total_src} –∏—Å—Ö–æ–¥–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫")
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞
            submitted = st.form_submit_button("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ")
            if submitted:
                st.session_state.mapping_complete = True
                st.success("–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                st.rerun()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞–ø–ø–∏–Ω–≥–∞
    if st.session_state.mapping_complete:
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π
        mapping_data = []
        for src_col, tgt_col in st.session_state.column_mapping.items():
            mapping_data.append({"–ò—Å—Ö–æ–¥–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞": src_col, "–¶–µ–ª–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞": tgt_col})
        
        if mapping_data:
            mapping_df = pd.DataFrame(mapping_data)
            st.dataframe(mapping_df, use_container_width=True)
        else:
            st.warning("–ù–µ—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫!")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
        if not st.session_state.transfer_complete:
            if st.button("üì§ –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö"):
                with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö..."):
                    try:
                        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        preview_df = preview_data(
                            st.session_state.source_data, 
                            st.session_state.target_data,
                            st.session_state.column_mapping
                        )
                        st.session_state.preview_result = preview_df
                        st.session_state.transfer_complete = True
                        st.rerun()
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
                        st.session_state.transfer_complete = False
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∏ –∫–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        if st.session_state.transfer_complete and st.session_state.preview_result is not None:
            st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
            st.dataframe(st.session_state.preview_result.head(10), use_container_width=True)
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if st.button("üíæ –°–∫–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"):
                with st.spinner("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è..."):
                    try:
                        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                        output = io.BytesIO()
                        
                        # –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –≤ —Ü–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        result_workbook = transfer_data_between_tables(
                            st.session_state.source_data,
                            st.session_state.target_workbook,
                            st.session_state.target_sheet_name,
                            st.session_state.column_mapping,
                            st.session_state.target_header_row
                        )
                        
                        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ BytesIO –±—É—Ñ–µ—Ä
                        result_workbook.save(output)
                        output.seek(0)
                        
                        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                        original_filename = st.session_state.target_file.name
                        filename_parts = os.path.splitext(original_filename)
                        output_filename = f"{filename_parts[0]}_–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π{filename_parts[1]}"
                        
                        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                        st.download_button(
                            label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                            data=output,
                            file_name=output_filename,
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )
                        
                        st.success(f"–§–∞–π–ª '{output_filename}' –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!")
                        
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –º–∞–ø–ø–∏–Ω–≥–∞ –∏ –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ
        if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
            st.session_state.column_mapping = {}
            st.session_state.mapping_complete = False
            st.session_state.transfer_complete = False
            st.session_state.auto_mapped = False
            st.session_state.preview_result = None
            st.rerun()

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è
with st.expander("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"):
    st.markdown("""
    ### –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º:
    
    1. **–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤**:
       - –í –ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç –≤–∑—è—Ç—ã –¥–∞–Ω–Ω—ã–µ
       - –í –ø—Ä–∞–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å—Å—è –¥–∞–Ω–Ω—ã–µ
       - –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –ª–∏—Å—Ç—ã –≤ –∫–∞–∂–¥–æ–º —Ñ–∞–π–ª–µ
       - –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
    
    2. **–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫**:
       - –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
       - –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
       - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ
       - –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    
    3. **–ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö**:
       - –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ "–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö"
       - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
       - –ù–∞–∂–º–∏—Ç–µ "–°–∫–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    
    4. **–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ**:
       - –î–ª—è —Å–±—Ä–æ—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ "–°–±—Ä–æ—Å–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
    
    ### –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã:
    - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ü–µ–ª–µ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã Excel (.xlsx) –æ—Ç Ozon, Wildberries –∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Å—Ö–æ–¥—Å—Ç–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫–æ–ª–æ–Ω–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ê—Ä—Ç–∏–∫—É–ª" –∏ "–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞")
    - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø—É—Å—Ç—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–∏
    """)

# –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
st.divider()
st.caption("""
**–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏**: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤. 
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å Ozon, Wildberries –∏ –¥—Ä—É–≥–∏–º–∏ Excel-—à–∞–±–ª–æ–Ω–∞–º–∏. **–í–µ—Ä—Å–∏—è:** 1.0
""")
